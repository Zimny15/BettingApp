@page "/wallet"
@using BookmakerApp.Services
@using BookmakerApp.Models
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using Microsoft.AspNetCore.Authorization
@inject WalletService WalletService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@attribute [Authorize]
@rendermode InteractiveServer

<h3>Your Wallet</h3>
<p>Aktualnie zalogowany: <strong>@contextUser</strong></p>


@if (wallet == null)
{
    <p>Loading wallet info...</p>
}
else
{
    <p><strong>Balance:</strong> @wallet.Balance zł</p>

    <EditForm Model="@topUpModel" OnValidSubmit="TopUp" FormName="topup">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <InputText @bind-Value="topUpModel.AmountString" class="form-control" placeholder="Kwota (np. 20,00)" />
        <button type="submit" class="btn btn-success mt-2">Top up</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <p class="text-success">@successMessage</p>
    }
}

@code {
    private string? contextUser;
    private Wallet? wallet;
    private TopUpModel topUpModel = new();
    private string? successMessage;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        contextUser = user.Identity?.Name;

        wallet = await WalletService.GetCurrentUserWalletAsync();
    }

    private async Task TopUp()
    {
        if (topUpModel.Amount >= 1 && topUpModel.Amount <= 10000)
        {
            if (await WalletService.AddFundsAsync(topUpModel.Amount))
            {
                successMessage = $"Successfully topped up {topUpModel.Amount} zł!";
                wallet = await WalletService.GetCurrentUserWalletAsync();
                topUpModel = new TopUpModel();
            }
        }
        else
        {
            successMessage = "Wartość musi być z zakresu od 1 do 10 000 zł.";
        }
    }

    private class TopUpModel
    {
        [Required(ErrorMessage = "Kwota jest wymagana.")]
        public string AmountString { get; set; } = "";

        public decimal Amount =>
            decimal.TryParse(AmountString.Replace(",", "."), CultureInfo.InvariantCulture, out var d) ? d : 0;
    }
}
