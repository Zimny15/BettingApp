@page "/results"
@using BookmakerApp.Shared.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

@rendermode InteractiveServer

<PageTitle>Today's Results</PageTitle>

<h1>Results - Today's Finished Matches</h1>

@if (groupedResults == null)
{
    <p>Loading results...</p>
}
else
{
    @foreach (var leagueGroup in groupedResults)
    {
        <div class="league-header">
            @if (!string.IsNullOrWhiteSpace(leagueGroup.Key.LeagueLogo))
            {
                <img src="@leagueGroup.Key.LeagueLogo" alt="@leagueGroup.Key.LeagueName" width="28" style="vertical-align: middle; margin-right: 8px;" />
            }
            <strong>@leagueGroup.Key.LeagueName</strong>
        </div>

        <table class="match-table">
            <thead>
                <tr>
                    <th style="width: 40%;">Home</th>
                    <th style="width: 40%;">Away</th>
                    <th style="width: 20%;">Final Score</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var match in leagueGroup)
                {
                    <tr class="clickable-row"
                        @onclick="@(() =>
                        {
                            NavigationManager.NavigateTo($"/results/{match.FixtureId}");
                        })">
                        <td class="@GetResultClass(match.HomeGoals, match.AwayGoals, true)">
                            <img src="@match.HomeTeamLogo" width="24" style="vertical-align: middle; margin-right: 6px;" />
                            @match.HomeTeam
                        </td>
                        <td class="@GetResultClass(match.HomeGoals, match.AwayGoals, false)">
                            <img src="@match.AwayTeamLogo" width="24" style="vertical-align: middle; margin-right: 6px;" />
                            @match.AwayTeam
                        </td>
                        <td class="finished-match">
                            @($"{match.HomeGoals}:{match.AwayGoals}")
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<style>
    .league-header {
        margin-top: 2rem;
        font-size: 1.3rem;
        color: #1e1e2f;
        display: flex;
        align-items: center;
    }

    .match-table {
        width: 100%;
        max-width: 800px;
        margin: 0 auto 2rem auto;
        border-collapse: collapse;
        border-radius: 12px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        font-family: 'Segoe UI', sans-serif;
    }

        .match-table thead {
            background-color: #1e1e2f;
            color: #fff;
            font-weight: 600;
            table-layout: fixed;
        }

        .match-table th,
        .match-table td {
            padding: 12px 16px;
            text-align: center;
            border-bottom: 1px solid #ddd;

        }

        .match-table tbody tr:hover {
            background-color: #f5f5f5;
        }

    .finished-match {
        color: black;
        font-weight: bold;
    }

    .winner {
        background-color: #d4edda;
        font-weight: bold;
    }

    .loser {
        background-color: #f8d7da;
        color: #721c24;
    }

    .draw {
        background-color: #ffe5b4;
    }

    .clickable-row {
        cursor: pointer;
    }

</style>

@code {
    private List<IGrouping<(string LeagueName, string LeagueLogo), MatchDto>> groupedResults;

    protected override async Task OnInitializedAsync()
    {
        var allMatches = await Http.GetFromJsonAsync<List<MatchDto>>("api/matches");

        var today = DateTime.Today;

        var finishedToday = allMatches
            .Where(m => m.Date.Date == today && m.HomeGoals.HasValue && m.AwayGoals.HasValue)
            .ToList();

        bool IsValidLogo(string logo) =>
            !string.IsNullOrWhiteSpace(logo)
            && logo.Contains("http")
            && !logo.ToLower().Contains("image_not_available")
            && !logo.ToLower().Contains("placeholder")
            && !logo.EndsWith(".svg")
            && !logo.Contains("default.png")
            && !logo.EndsWith("/");

        var filtered = finishedToday
            .Where(m =>
                IsValidLogo(m.LeagueLogo) &&
                IsValidLogo(m.HomeTeamLogo) &&
                IsValidLogo(m.AwayTeamLogo))
            .ToList();

        groupedResults = filtered
            .GroupBy(m => (m.LeagueName, m.LeagueLogo))
            .OrderBy(g => g.Key.LeagueName)
            .ToList();
    }
    private string GetResultClass(int? homeGoals, int? awayGoals, bool isHome)
    {
        if (!homeGoals.HasValue || !awayGoals.HasValue)
            return "";

        if (homeGoals == awayGoals)
            return "draw";

        if (isHome)
            return homeGoals > awayGoals ? "winner" : "loser";
        else
            return awayGoals > homeGoals ? "winner" : "loser";
    }

    private void NavigateToMatchDetails(MatchDto match)
    {
        var matchId = GenerateMatchId(match);
        NavigationManager.NavigateTo($"/results/{matchId}");
    }

    private int GenerateMatchId(MatchDto match)
    {
        return (match.HomeTeam + match.AwayTeam + match.Date.ToString("yyyyMMddHH")).GetHashCode();
    }

}
